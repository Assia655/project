name: CI/CD Pipeline with KinD

on:
  push:
    branches:
      - main  # Exécuter le pipeline pour les pushes dans la branche main.

jobs:
  build-push-deploy:
    name: Build, Push, and Deploy with KinD
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Vérifier le code source
      - name: Checkout Code
        uses: actions/checkout@v3

      # Étape 2 : Installer Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Étape 3 : Installer KinD
      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-amd64
          chmod +x ./kind
          mv ./kind /usr/local/bin/kind

      # Étape 4 : Créer un cluster KinD
      - name: Create KinD Cluster
        run: |
          kind create cluster --name my-py-cluster

      # Étape 5 : Vérifier que le cluster KinD fonctionne
      - name: Validate Kubernetes Connection
        run: |
          kubectl cluster-info --context kind-my-py-cluster
          kubectl get nodes

      # Étape 6 : Construire et charger les images Docker dans KinD
      - name: Build and Load User Service Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-user_service:v2 ./backend/user_service
          kind load docker-image ${{ secrets.DOCKER_USERNAME }}/backend-user_service:v2 --name my-py-cluster

      - name: Build and Load Transaction Service Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-transaction_service:v1 ./backend/transaction_service
          kind load docker-image ${{ secrets.DOCKER_USERNAME }}/backend-transaction_service:v1 --name my-py-cluster

      - name: Build and Load Price Service Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-price_service:v1 ./backend/price_service
          kind load docker-image ${{ secrets.DOCKER_USERNAME }}/backend-price_service:v1 --name my-py-cluster

      - name: Build and Load API Gateway Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-api_gateway:latest ./backend/api-gateway
          kind load docker-image ${{ secrets.DOCKER_USERNAME }}/backend-api_gateway:latest --name my-py-cluster

      # Étape 7 : Déployer les fichiers YAML dans le cluster KinD
      - name: Deploy to KinD
        run: |
          kubectl apply -f ./backend/kubernetes/user-service-deployment.yml
          kubectl apply -f ./backend/kubernetes/user-service-service.yml
          kubectl apply -f ./backend/kubernetes/transaction-service-deployment.yaml
          kubectl apply -f ./backend/kubernetes/transaction-service-service.yaml
          kubectl apply -f ./backend/kubernetes/price-service-deployment.yaml
          kubectl apply -f ./backend/kubernetes/price-service-service.yaml
          kubectl apply -f ./backend/kubernetes/api-gateway-deployment.yaml
          kubectl apply -f ./backend/kubernetes/api-gateway-service.yaml
          kubectl apply -f ./backend/kubernetes/kafka-deployment.yaml
          kubectl apply -f ./backend/kubernetes/kafka-service.yaml
          kubectl apply -f ./backend/kubernetes/zookeeper-deployment.yaml
          kubectl apply -f ./backend/kubernetes/zookeeper-service.yaml

      # Étape 8 : Vérifier l'état des déploiements
      - name: Verify Rollout Status for All Services
        run: |
          kubectl rollout status deployment/user-service
          kubectl rollout status deployment/transaction-service
          kubectl rollout status deployment/price-service
          kubectl rollout status deployment/api-gateway

      # Étape 9 : Vérifier les Pods déployés
      - name: Verify Deployed Pods
        run: kubectl get pods

      # Étape 10 : Rollback automatique en cas d'échec
      - name: Rollback on Failure
        if: failure()  # Exécute cette étape uniquement si une étape précédente échoue
        run: |
          kubectl rollout undo deployment/user-service
          kubectl rollout undo deployment/transaction-service
          kubectl rollout undo deployment/price-service
          kubectl rollout undo deployment/api-gateway



